type ManifestIcons = Record<number, string>;
interface SearchProvider {
    name?: string | undefined;
    keyword?: string | undefined;
    favicon_url?: string | undefined;
    search_url: string;
    encoding?: string | undefined;
    suggest_url?: string | undefined;
    instant_url?: string | undefined;
    image_url?: string | undefined;
    search_url_post_params?: string | undefined;
    suggest_url_post_params?: string | undefined;
    instant_url_post_params?: string | undefined;
    image_url_post_params?: string | undefined;
    alternate_urls?: string[] | undefined;
    prepopulated_id?: number | undefined;
    is_default?: boolean | undefined;
}
interface ManifestBase {
    manifest_version: number;
    name: string;
    version: string;
    default_locale?: string | undefined;
    description?: string | undefined;
    icons?: ManifestIcons | undefined;
    author?: {
        email: string;
    } | undefined;
    background_page?: string | undefined;
    chrome_settings_overrides?: {
        homepage?: string | undefined;
        search_provider?: SearchProvider | undefined;
        startup_pages?: string[] | undefined;
    } | undefined;
    chrome_ui_overrides?: {
        bookmarks_ui?: {
            remove_bookmark_shortcut?: boolean | undefined;
            remove_button?: boolean | undefined;
        } | undefined;
    } | undefined;
    chrome_url_overrides?: {
        bookmarks?: string | undefined;
        history?: string | undefined;
        newtab?: string | undefined;
    } | undefined;
    commands?: Record<string, {
        suggested_key?: {
            default?: string | undefined;
            windows?: string | undefined;
            mac?: string | undefined;
            chromeos?: string | undefined;
            linux?: string | undefined;
        } | undefined;
        description?: string | undefined;
        global?: boolean | undefined;
    }> | undefined;
    content_capabilities?: {
        matches?: string[] | undefined;
        permissions?: string[] | undefined;
    } | undefined;
    content_scripts?: Array<{
        matches?: string[] | undefined;
        exclude_matches?: string[] | undefined;
        css?: string[] | undefined;
        js?: string[] | undefined;
        run_at?: string | undefined;
        all_frames?: boolean | undefined;
        match_about_blank?: boolean | undefined;
        include_globs?: string[] | undefined;
        exclude_globs?: string[] | undefined;
    }> | undefined;
    converted_from_user_script?: boolean | undefined;
    current_locale?: string | undefined;
    devtools_page?: string | undefined;
    event_rules?: Array<{
        event?: string | undefined;
        actions?: Array<{
            type: string;
        }> | undefined;
        conditions?: chrome.declarativeContent.PageStateMatcherProperties[] | undefined;
    }> | undefined;
    externally_connectable?: {
        ids?: string[] | undefined;
        matches?: string[] | undefined;
        accepts_tls_channel_id?: boolean | undefined;
    } | undefined;
    file_browser_handlers?: Array<{
        id?: string | undefined;
        default_title?: string | undefined;
        file_filters?: string[] | undefined;
    }> | undefined;
    file_system_provider_capabilities?: {
        configurable?: boolean | undefined;
        watchable?: boolean | undefined;
        multiple_mounts?: boolean | undefined;
        source?: string | undefined;
    } | undefined;
    homepage_url?: string | undefined;
    import?: Array<{
        id: string;
        minimum_version?: string | undefined;
    }> | undefined;
    export?: {
        whitelist?: string[] | undefined;
    } | undefined;
    incognito?: string | undefined;
    input_components?: Array<{
        name?: string | undefined;
        type?: string | undefined;
        id?: string | undefined;
        description?: string | undefined;
        language?: string[] | string | undefined;
        layouts?: string[] | undefined;
        indicator?: string | undefined;
    }> | undefined;
    key?: string | undefined;
    minimum_chrome_version?: string | undefined;
    nacl_modules?: Array<{
        path: string;
        mime_type: string;
    }> | undefined;
    oauth2?: {
        client_id: string;
        scopes?: string[] | undefined;
    } | undefined;
    offline_enabled?: boolean | undefined;
    omnibox?: {
        keyword: string;
    } | undefined;
    options_page?: string | undefined;
    options_ui?: {
        page?: string | undefined;
        chrome_style?: boolean | undefined;
        open_in_tab?: boolean | undefined;
    } | undefined;
    platforms?: Array<{
        nacl_arch?: string | undefined;
        sub_package_path: string;
    }> | undefined;
    plugins?: Array<{
        path: string;
    }> | undefined;
    requirements?: {
        '3D'?: {
            features?: string[] | undefined;
        } | undefined;
        plugins?: {
            npapi?: boolean | undefined;
        } | undefined;
    } | undefined;
    sandbox?: {
        pages: string[];
        content_security_policy?: string | undefined;
    } | undefined;
    short_name?: string | undefined;
    spellcheck?: {
        dictionary_language?: string | undefined;
        dictionary_locale?: string | undefined;
        dictionary_format?: string | undefined;
        dictionary_path?: string | undefined;
    } | undefined;
    storage?: {
        managed_schema: string;
    } | undefined;
    tts_engine?: {
        voices: Array<{
            voice_name: string;
            lang?: string | undefined;
            gender?: string | undefined;
            event_types?: string[] | undefined;
        }>;
    } | undefined;
    update_url?: string | undefined;
    version_name?: string | undefined;
    [key: string]: any;
}

interface HtmlFieldsOutput {
    css: string[];
    js: string[];
    static: string[];
    html: string;
    json: string[];
}
interface ManifestFields {
    html: HtmlFieldsOutput;
    icons: string | string[] | {
        light: string;
        dark: string;
    };
    json: string | string[];
    locales: string[];
    scripts: string | string[];
    webResources: any;
}
type Manifest = ManifestBase;
type ManifestData = string | string[] | undefined;
type ManifestHtmlData = {
    css: string[];
    js: string[];
    static: string[];
    html: string;
} | undefined;

interface ParsedHtmlAsset {
    css: string[];
    js: string[];
    static: string[];
}

type PagesPath = Record<string, (ParsedHtmlAsset & {
    html: string;
}) | undefined>;
declare function getPagesPath(pagePath?: string): PagesPath | undefined;

declare function browserExtensionManifestFields(manifestPath: string, manifest?: Manifest): {
    html: Record<string, ManifestHtmlData>;
    icons: Record<string, string | string[] | {
        light: string;
        dark: string;
    }[] | undefined>;
    json: Record<string, string | undefined>;
    locales: string[] | undefined;
    scripts: Record<string, ManifestData>;
    web_accessible_resources: ManifestData | string[][];
};

export { type ManifestFields, browserExtensionManifestFields as default, getPagesPath };

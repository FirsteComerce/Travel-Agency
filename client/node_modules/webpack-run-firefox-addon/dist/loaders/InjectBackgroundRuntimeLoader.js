"use strict";var g=Object.create;var a=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var k=(e,t)=>{for(var r in t)a(e,r,{get:t[r],enumerable:!0})},l=(e,t,r,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of b(t))!w.call(e,n)&&n!==r&&a(e,n,{get:()=>t[n],enumerable:!(s=h(t,n))||s.enumerable});return e};var v=(e,t,r)=>(r=e!=null?g(p(e)):{},l(t||!e||!e.__esModule?a(r,"default",{value:e,enumerable:!0}):r,e)),q=e=>l(a({},"__esModule",{value:!0}),e);var _={};k(_,{default:()=>y});module.exports=q(_);var o=v(require("path")),u=require("loader-utils"),m=require("schema-utils"),x={type:"object",properties:{test:{type:"string"},manifestPath:{type:"string"}}};function y(e){let t=this.getOptions(),r=t.manifestPath,s=o.default.dirname(r),n=require(r);(0,m.validate)(x,t,{name:"Inject Reload (background.scripts and background.service_worker) Script",baseDataPath:"options"});let c=(0,u.urlToRequest)(this.resourcePath),d=`
  ;browser.runtime.onMessageExternal.addListener(
    async (request, _sender) => {
      const managementInfo = await new Promise((resolve) => {
        browser.management.getSelf(resolve);
      });

      // Ping-pong between the user extension background page(this)
      // and the middleware socket client (reloadService.ts),
      // which will then send a message to the server
      // (startServer.ts) so it can display the extension info.
      if (request.initialLoadData) {
        return {
          id: browser.runtime.id,
          manifest: browser.runtime.getManifest(),
          management: managementInfo,
        };
      }

      // Reload the extension runtime if the manifest or
      // service worker changes.
      if (
        request.changedFile === "manifest.json" ||
        request.changedFile === "service_worker" ||
        request.changedFile === "_locales"
      ) {
        setTimeout(() => {
          browser.runtime.reload();
        }, 750);
      }

      // Reload all tabs if the contextMenus code changes.
      if (request.changedFile === "contextMenus") {
        browser.tabs.query({}, (tabs) => {
          if (!tabs) return;
          tabs.forEach((tab) => browser.tabs.reload(tab.id));
        });
      }

      // Reload all tabs if the declarative_net_request code changes.
      if (request.changedFile === "declarative_net_request") {
        browser.runtime.reload();
      }

      return { reloaded: true };
    }
  );
  `;if(n.background){if(n.background.scripts)for(let i of[n.background.scripts[0]]){let f=o.default.resolve(s,i);if(c.includes(f))return`${d}${e}`}if(n.background.service_worker){let i=o.default.resolve(s,n.background.service_worker);if(c.includes(i))return`${d}${e}`}}return e}

"use strict";var b=Object.create;var l=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var M=(t,e)=>{for(var r in e)l(t,r,{get:e[r],enumerable:!0})},f=(t,e,r,o)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of g(e))!y.call(t,s)&&s!==r&&l(t,s,{get:()=>e[s],enumerable:!(o=E(e,s))||o.enumerable});return t};var $=(t,e,r)=>(r=t!=null?b(w(t)):{},f(e||!t||!t.__esModule?l(r,"default",{value:t,enumerable:!0}):r,t)),v=t=>f(l({},"__esModule",{value:!0}),t);var W={};M(W,{default:()=>p});module.exports=v(W);var c=$(require("webpack")),n=require("@colors/colors/safe");function d(t,e){let r=require(t),o="Conflict: Multiple assets emit different content to the same filename ";if(e.message.includes(o)){let s=e.message.replace(o,""),a=s.split(".").pop(),i=`[${r.name}'s content_scripts] One of your \`${a}\` file imports is also defined as a content_script in manifest.json. Remove the duplicate entry and try again.`;if(s.startsWith("content_scripts"))return new c.default.WebpackError(i)}return null}function h(t,e){let r=require(t),o="Module not found: Error:";if(e.message.includes(o)){let a=`[${r.name}]:${e.message.replace(o,"")}. Make sure to import the file correctly and that it exists in your extension's directory.

If you need to handle assets not supported by ${(0,n.underline)("manifest.json")}, add them to the ${(0,n.underline)("public/")} (for static content) or ${(0,n.underline)("scripts/")} folder. Read more about special folders ${(0,n.underline)((0,n.blue)("https://extension.js.org/n/features/special-folders"))}.`;return new c.default.WebpackError((0,n.bold)(a))}return null}function k(t,e){let r=require(t),o="Top-level-await is only supported in EcmaScript Modules",s="Make sure to set the module type to 'module' in your package.json or use the .mjs extension for your files.";if(e.message.includes(o)){let a=`[${r.name}] ${(0,n.red)((0,n.bold)(o+`.
`+s))}`;return new c.default.WebpackError(a)}return null}var p=class{manifestPath;constructor(e){this.manifestPath=e.manifestPath}apply(e){e.hooks.compilation.tap("CommonErrorsPlugin (module)",r=>{r.hooks.afterSeal.tapAsync("CommonErrorsPlugin (module)",o=>{r.errors.forEach((s,a)=>{let i=d(this.manifestPath,s),u=k(this.manifestPath,s),m=h(this.manifestPath,s);i&&(r.errors[a]=i),u&&(r.errors[a]=u),m&&(r.errors[a]=m)}),o()})})}};
